---
- name: Load mount point definitions
  include_vars: "{{ playbook_dir }}/group_vars/lxc_mounts.yml"
  tags: lxc_mounts

- name: Get container ID from inventory
  set_fact:
    target_container_id: "{{ hostvars[inventory_hostname]['container_id'] }}"
  when: hostvars[inventory_hostname]['container_id'] is defined
  tags: lxc_mounts

- name: Fail if container_id not found
  fail:
    msg: "container_id not defined for {{ inventory_hostname }} in inventory"
  when: target_container_id is not defined
  tags: lxc_mounts

- name: Check if LXC config file exists
  stat:
    path: "/etc/pve/lxc/{{ target_container_id }}.conf"
  register: lxc_config_exists
  delegate_to: "{{ groups['proxmox_hosts'][0] }}"
  become: yes
  tags: lxc_mounts

- name: Check container status
  shell: "pct status {{ target_container_id }}"
  register: container_status
  delegate_to: "{{ groups['proxmox_hosts'][0] }}"
  become: yes
  when: lxc_config_exists.stat.exists
  tags: lxc_mounts

- name: Read current LXC configuration
  slurp:
    src: "/etc/pve/lxc/{{ target_container_id }}.conf"
  register: current_config
  delegate_to: "{{ groups['proxmox_hosts'][0] }}"
  become: yes
  when: lxc_config_exists.stat.exists
  tags: lxc_mounts

- name: Generate desired mount points and user mappings
  template:
    src: lxc_mounts_only.j2
    dest: "/tmp/{{ target_container_id }}_desired.conf"
  delegate_to: "{{ groups['proxmox_hosts'][0] }}"
  register: desired_config
  tags: lxc_mounts

- name: Read desired configuration
  slurp:
    src: "/tmp/{{ target_container_id }}_desired.conf"
  register: desired_config_content
  delegate_to: "{{ groups['proxmox_hosts'][0] }}"
  tags: lxc_mounts

- name: Extract current mount points and user mappings
  set_fact:
    current_mounts: "{{ (current_config.content | b64decode).split('\n') | select('match', '^mp[0-9]+:.*') | list }}"
    current_idmaps: "{{ (current_config.content | b64decode).split('\n') | select('match', '^lxc\\.idmap:.*') | list }}"
    desired_lines: "{{ (desired_config_content.content | b64decode).split('\n') | reject('match', '^#.*') | reject('match', '^\\s*$') | list }}"
  when: lxc_config_exists.stat.exists
  tags: lxc_mounts

- name: Determine if configuration needs updating
  set_fact:
    config_needs_update: >-
      {{
        (current_mounts | sort) != (desired_lines | select('match', '^mp[0-9]+:.*') | list | sort) or
        (current_idmaps | sort) != (desired_lines | select('match', '^lxc\\.idmap:.*') | list | sort)
      }}
  when: lxc_config_exists.stat.exists
  tags: lxc_mounts

- name: Display current vs desired state
  debug:
    msg:
      - "Container {{ target_container_id }} status: {{ container_status.stdout | default('unknown') }}"
      - "Current mount points: {{ current_mounts | length }} found"
      - "Desired mount points: {{ desired_lines | select('match', '^mp[0-9]+:.*') | list | length }}"
      - "Current user mappings: {{ current_idmaps | length }} found"
      - "Desired user mappings: {{ desired_lines | select('match', '^lxc\\.idmap:.*') | list | length }}"
      - "Configuration needs update: {{ config_needs_update | default(true) }}"
  when: lxc_config_exists.stat.exists
  tags: lxc_mounts

- name: Backup original LXC config (only if changes needed)
  copy:
    src: "/etc/pve/lxc/{{ target_container_id }}.conf"
    dest: "/etc/pve/lxc/{{ target_container_id }}.conf.backup.{{ ansible_date_time.epoch }}"
    remote_src: yes
  delegate_to: "{{ groups['proxmox_hosts'][0] }}"
  become: yes
  when: 
    - lxc_config_exists.stat.exists
    - config_needs_update | default(true)
  failed_when: false  # Don't fail if backup can't be created due to permissions
  tags: lxc_mounts

- name: Remove existing managed mount points from LXC config
  lineinfile:
    path: "/etc/pve/lxc/{{ target_container_id }}.conf"
    regexp: '^mp[0-9]+:.*'
    state: absent
  delegate_to: "{{ groups['proxmox_hosts'][0] }}"
  become: yes
  when: 
    - lxc_config_exists.stat.exists
    - config_needs_update | default(true)
  tags: lxc_mounts

- name: Remove existing managed user mappings from LXC config
  lineinfile:
    path: "/etc/pve/lxc/{{ target_container_id }}.conf"
    regexp: '^lxc\.idmap:.*'
    state: absent
  delegate_to: "{{ groups['proxmox_hosts'][0] }}"
  become: yes
  when: 
    - lxc_config_exists.stat.exists
    - config_needs_update | default(true)
    - user_maps is defined
    - user_maps == true
  tags: lxc_mounts

- name: Append new mount points and user mappings to LXC config
  shell: "cat /tmp/{{ target_container_id }}_desired.conf >> /etc/pve/lxc/{{ target_container_id }}.conf"
  delegate_to: "{{ groups['proxmox_hosts'][0] }}"
  become: yes
  when: 
    - lxc_config_exists.stat.exists
    - config_needs_update | default(true)
  register: config_updated
  tags: lxc_mounts

- name: Restart container if configuration changed and container is running
  shell: "pct stop {{ target_container_id }} && sleep 3 && pct start {{ target_container_id }}"
  delegate_to: "{{ groups['proxmox_hosts'][0] }}"
  become: yes
  when:
    - config_updated is succeeded
    - container_status.stdout is defined
    - "'running' in container_status.stdout"
  register: container_restarted
  tags: lxc_mounts

- name: Clean up temporary files
  file:
    path: "/tmp/{{ target_container_id }}_desired.conf"
    state: absent
  delegate_to: "{{ groups['proxmox_hosts'][0] }}"
  tags: lxc_mounts

- name: Display final status
  debug:
    msg:
      - "LXC {{ target_container_id }} configuration: {{ 'UPDATED' if (config_updated is succeeded) else 'NO CHANGES NEEDED' }}"
      - "Mount points: {{ needed_mounts | default([]) | length }} configured"
      - "User mappings: {{ 'enabled' if (user_maps is defined and user_maps == true) else 'disabled' }}"
      - "Container restart: {{ 'RESTARTED' if (container_restarted is succeeded) else 'NOT NEEDED' }}"
  tags: lxc_mounts
