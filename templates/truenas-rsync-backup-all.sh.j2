#!/bin/bash
# TrueNAS Master Backup Script - All Directories
# Generated by Ansible - Compatible with TrueNAS

set -e

LOG_FILE="/var/log/backup-all.log"
exec > >(tee -a "${LOG_FILE}") 2>&1

echo "=== Starting All TrueNAS Backups at $(date) ==="

FAILED_BACKUPS=0
TOTAL_SIZE=0

# Check PBS connectivity first
if ! ssh -i /root/.ssh/pbs_backup_rsa -o StrictHostKeyChecking=no bill@{{ pbs_server }} "echo 'PBS connection verified'"; then
    echo "ERROR: Cannot connect to PBS server"
    exit 1
fi

{% for item in backup_paths %}
echo "Running backup: {{ item.backup_id }}"
START_TIME=$(date +%s)

if /mnt/ssd-files/scripts/pbs-backup/backup-{{ item.backup_id }}.sh; then
    END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))
    echo "SUCCESS: {{ item.backup_id }} completed in ${DURATION} seconds"
    
    # Get backup size
    SIZE=$(ssh -i /root/.ssh/pbs_backup_rsa -o StrictHostKeyChecking=no bill@{{ pbs_server }} "du -sh /srv/backups/truenas/{{ item.backup_id }} 2>/dev/null | cut -f1 || echo 'Unknown'")
    echo "Backup size: ${SIZE}"
else
    echo "ERROR: Backup {{ item.backup_id }} failed"
    FAILED_BACKUPS=$((FAILED_BACKUPS + 1))
fi
echo "---"
{% endfor %}

# Summary
echo "=== All backups completed at $(date) ==="
echo "Total backups: {{ backup_paths | length }}"
echo "Failed backups: ${FAILED_BACKUPS}"
echo "Successful backups: $(({{ backup_paths | length }} - FAILED_BACKUPS))"

# Get total backup storage usage
TOTAL_SIZE=$(ssh -i /root/.ssh/pbs_backup_rsa -o StrictHostKeyChecking=no bill@{{ pbs_server }} "du -sh /srv/backups/truenas 2>/dev/null | cut -f1 || echo 'Unknown'")
echo "Total backup storage used: ${TOTAL_SIZE}"

# Create summary report
cat > /tmp/backup-summary.txt << EOF
TrueNAS Backup Summary - $(date)
=================================
Total directories: {{ backup_paths | length }}
Successful: $(({{ backup_paths | length }} - FAILED_BACKUPS))
Failed: ${FAILED_BACKUPS}
Total storage: ${TOTAL_SIZE}

Backup paths:
{% for item in backup_paths %}
- {{ item.path }} â†’ {{ item.backup_id }}
{% endfor %}
EOF

if [ ${FAILED_BACKUPS} -gt 0 ]; then
    echo "WARNING: ${FAILED_BACKUPS} backup(s) failed - check individual logs"
    exit 1
else
    echo "SUCCESS: All backups completed successfully"
fi
