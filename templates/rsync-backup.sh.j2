#!/bin/bash
# Rsync Backup Script - TrueNAS to PBS
# Generated by Ansible

set -e

# Configuration
PBS_SERVER="{{ pbs_server }}"
PBS_USER="{{ pbs_backup_user }}"
BACKUP_BASE="{{ backup_base_path }}"
SSH_KEY="/home/{{ ansible_user }}/.ssh/pbs_backup_rsa"
LOG_FILE="/var/log/rsync-backup-pbs.log"

# Logging
exec > >(tee -a "${LOG_FILE}") 2>&1

echo "=== Starting rsync backup to PBS at $(date) ==="

# Ensure backup directory exists on PBS
ssh -i "${SSH_KEY}" "${PBS_USER}@${PBS_SERVER}" "mkdir -p ${BACKUP_BASE}"

FAILED_SYNCS=0

{% for item in backup_sources %}
echo "Syncing {{ item.src }} to {{ item.dest }}..."

# Build exclude arguments
EXCLUDE_ARGS=""
{% if item.exclude is defined %}
{% for pattern in item.exclude %}
EXCLUDE_ARGS="${EXCLUDE_ARGS} --exclude='{{ pattern }}'"
{% endfor %}
{% endif %}

# Run rsync
eval rsync -avz --delete \
    --progress \
    ${EXCLUDE_ARGS} \
    -e "ssh -i ${SSH_KEY}" \
    "{{ item.src }}" \
    "${PBS_USER}@${PBS_SERVER}:${BACKUP_BASE}/{{ item.dest }}/"

if [ $? -ne 0 ]; then
    echo "ERROR: Failed to sync {{ item.dest }}"
    FAILED_SYNCS=$((FAILED_SYNCS + 1))
fi

{% endfor %}

echo "=== Backup completed at $(date) ==="
echo "Failed syncs: ${FAILED_SYNCS}"

if [ ${FAILED_SYNCS} -gt 0 ]; then
    echo "WARNING: ${FAILED_SYNCS} sync(s) failed"
    exit 1
else
    echo "SUCCESS: All syncs completed successfully"
fi
